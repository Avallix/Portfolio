{"config":{"index_options":{"tokenizer":"lunr","trimmer":"lunr.trimmer"},"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs 101, Uncle Moe! Hello Uncle Moe! Austin has set up this guide especially for you to introduce you to the wonders of MkDocs. By the end of this guide, you'll have a basic understanding of setting up MkDocs and hosting the documentation on GitHub. What is MkDocs? MkDocs is a fast, simple, and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Static vs. Dynamic Sites: Static Sites : These are pre-rendered HTML files. They're fast, secure, and can be easily hosted on platforms like GitHub Pages. MkDocs generates static sites. Dynamic Sites : Unlike static sites, dynamic sites generate content in real-time. Think of platforms like WordPress. They can be more flexible but also require more resources. Setting Up MkDocs: Installation : Install MkDocs with Python by running: pip install mkdocs Start a New Project : Create a new directory for your project: mkdocs new [dir-name] Serve the Project Locally : Navigate to your project directory and run: mkdocs serve This will start a local server. You can view your documentation by opening a web browser and navigating to http://127.0.0.1:8000/ . Build the Documentation : Once you're ready, build the static files by running: mkdocs build Hosting on GitHub: Once you've set up and built your documentation, you can host it on GitHub Pages. Push your MkDocs project to a GitHub repository. Build the static site with: mkdocs build Deploy it to GitHub Pages with: mkdocs gh-deploy Your site will then be accessible at https://[username].github.io/[repository-name]/ . Remember, each time you make updates to your documentation, run mkdocs gh-deploy to see those changes online. Dive Deeper: mkdocs -h : To see a list of all available commands and their purpose. Explore themes, plugins, and extensions to enhance your documentation's appearance and functionality. I hope this guide provides a clear introduction to MkDocs and its capabilities, Uncle Moe. Feel free to reach out if you have any questions or need further clarifications. Enjoy documenting! Linking Links","title":"For Moe"},{"location":"#welcome-to-mkdocs-101-uncle-moe","text":"Hello Uncle Moe! Austin has set up this guide especially for you to introduce you to the wonders of MkDocs. By the end of this guide, you'll have a basic understanding of setting up MkDocs and hosting the documentation on GitHub.","title":"Welcome to MkDocs 101, Uncle Moe!"},{"location":"#what-is-mkdocs","text":"MkDocs is a fast, simple, and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.","title":"What is MkDocs?"},{"location":"#static-vs-dynamic-sites","text":"Static Sites : These are pre-rendered HTML files. They're fast, secure, and can be easily hosted on platforms like GitHub Pages. MkDocs generates static sites. Dynamic Sites : Unlike static sites, dynamic sites generate content in real-time. Think of platforms like WordPress. They can be more flexible but also require more resources.","title":"Static vs. Dynamic Sites:"},{"location":"#setting-up-mkdocs","text":"Installation : Install MkDocs with Python by running: pip install mkdocs Start a New Project : Create a new directory for your project: mkdocs new [dir-name] Serve the Project Locally : Navigate to your project directory and run: mkdocs serve This will start a local server. You can view your documentation by opening a web browser and navigating to http://127.0.0.1:8000/ . Build the Documentation : Once you're ready, build the static files by running: mkdocs build","title":"Setting Up MkDocs:"},{"location":"#hosting-on-github","text":"Once you've set up and built your documentation, you can host it on GitHub Pages. Push your MkDocs project to a GitHub repository. Build the static site with: mkdocs build Deploy it to GitHub Pages with: mkdocs gh-deploy Your site will then be accessible at https://[username].github.io/[repository-name]/ . Remember, each time you make updates to your documentation, run mkdocs gh-deploy to see those changes online.","title":"Hosting on GitHub:"},{"location":"#dive-deeper","text":"mkdocs -h : To see a list of all available commands and their purpose. Explore themes, plugins, and extensions to enhance your documentation's appearance and functionality. I hope this guide provides a clear introduction to MkDocs and its capabilities, Uncle Moe. Feel free to reach out if you have any questions or need further clarifications. Enjoy documenting!","title":"Dive Deeper:"},{"location":"#linking","text":"Links","title":"Linking"},{"location":"links/","text":"--- title: Linking Between Pages in MkDocs description: A guide on how to add and manage internal links in MkDocs. --- Linking Between Pages in MkDocs Creating navigable documentation is crucial for user experience. Internal links between various pages ensure smooth transitions. This guide elucidates the process of creating and managing such links in MkDocs. Understanding the Directory Structure Your docs directory might resemble: docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 about.md \u251c\u2500\u2500 projects/ \u2502 \u251c\u2500\u2500 project1.md \u2502 \u2514\u2500\u2500 project2.md \u2514\u2500\u2500 contact.md This structure dictates how you'll establish links. Linking Methodology 1. Main Directory Links To reference pages in the primary directory: [About Us](about.md) 2. Links to Subdirectories To link to a page inside a subdirectory from the primary directory: [Project 1 Overview](projects/project1.md) 3. Subdirectory-to-Subdirectory From a page inside a subdirectory: Linking back to the primary directory: markdown [Return to Home](../index.md) Linking within the same subdirectory: markdown [See Project 2](project2.md) 4. Header Anchors Headers can also be anchor points. Given a header: ## Introduction Directly link to this section: [Navigate to Introduction](about.md#introduction) Verification: Test Your Links Post-creation, always preview: mkdocs serve Visit http://127.0.0.1:8000/ in your browser. Test every link to validate its functionality. Concluding Advice Maintain vigilance over internal links, especially when restructuring or altering pages. Functional links are the backbone of efficient documentation. After verification, always deploy your updated documentation, ensuring a seamless experience for all readers. For integration, save the content as linking_guide.md in your docs directory. Incorporate it into your mkdocs.yml under the nav section for it to appear in your documentation's navigation. ``` After you've added the page, you can include it in your mkdocs.yml file to ensure it's part of your site's navigation. If you need further assistance with that, let me know!","title":"Linking Pages"},{"location":"links/#linking-between-pages-in-mkdocs","text":"Creating navigable documentation is crucial for user experience. Internal links between various pages ensure smooth transitions. This guide elucidates the process of creating and managing such links in MkDocs.","title":"Linking Between Pages in MkDocs"},{"location":"links/#understanding-the-directory-structure","text":"Your docs directory might resemble: docs/ \u251c\u2500\u2500 index.md \u251c\u2500\u2500 about.md \u251c\u2500\u2500 projects/ \u2502 \u251c\u2500\u2500 project1.md \u2502 \u2514\u2500\u2500 project2.md \u2514\u2500\u2500 contact.md This structure dictates how you'll establish links.","title":"Understanding the Directory Structure"},{"location":"links/#linking-methodology","text":"","title":"Linking Methodology"},{"location":"links/#1-main-directory-links","text":"To reference pages in the primary directory: [About Us](about.md)","title":"1. Main Directory Links"},{"location":"links/#2-links-to-subdirectories","text":"To link to a page inside a subdirectory from the primary directory: [Project 1 Overview](projects/project1.md)","title":"2. Links to Subdirectories"},{"location":"links/#3-subdirectory-to-subdirectory","text":"From a page inside a subdirectory: Linking back to the primary directory: markdown [Return to Home](../index.md) Linking within the same subdirectory: markdown [See Project 2](project2.md)","title":"3. Subdirectory-to-Subdirectory"},{"location":"links/#4-header-anchors","text":"Headers can also be anchor points. Given a header: ## Introduction Directly link to this section: [Navigate to Introduction](about.md#introduction)","title":"4. Header Anchors"},{"location":"links/#verification-test-your-links","text":"Post-creation, always preview: mkdocs serve Visit http://127.0.0.1:8000/ in your browser. Test every link to validate its functionality.","title":"Verification: Test Your Links"},{"location":"links/#concluding-advice","text":"Maintain vigilance over internal links, especially when restructuring or altering pages. Functional links are the backbone of efficient documentation. After verification, always deploy your updated documentation, ensuring a seamless experience for all readers. For integration, save the content as linking_guide.md in your docs directory. Incorporate it into your mkdocs.yml under the nav section for it to appear in your documentation's navigation. ``` After you've added the page, you can include it in your mkdocs.yml file to ensure it's part of your site's navigation. If you need further assistance with that, let me know!","title":"Concluding Advice"},{"location":"payments/","text":"--- title: Integrating PayPal Payment in MkDocs description: A step-by-step guide on how to add a PayPal \"Buy Now\" button into your MkDocs website. --- Integrating PayPal Payment in MkDocs While MkDocs is primarily designed for creating documentation, it's possible to add static elements like a PayPal \"Buy Now\" button to your pages. Here's how you can integrate such a button: 1. Create a PayPal Button Log in to your PayPal account . Navigate to Tools > All Tools > PayPal buttons . Select \"Create new button\". Opt for the \"Buy Now\" button type. Fill out the necessary item details and adjust its appearance as required. Once done, click \"Create Button\". 2. Obtain the Button Code After creation, PayPal will provide a button code. You'll find two primary types: - A script-based solution - A URL-only version For MkDocs, the URL-only method is simpler. Copy the URL, which should resemble: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE 3. Embed into MkDocs Incorporate the button into your desired MkDocs content using a Markdown link: [Buy Now with PayPal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE) Alternatively, use an image as a button: [![PayPal](path/to/your/paypal_image.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE) 4. Test the Integration After integrating, activate your MkDocs site using: mkdocs serve Ensure the payment link redirects to PayPal correctly and showcases the intended item and its price. 5. Deployment Once tested, deploy your MkDocs site. If you're utilizing a platform like GitHub Pages, ensure your payment button or link functions post-deployment. Important Considerations This approach requires users to leave your MkDocs site to finalize their transaction on PayPal's platform. For a more seamless experience with shopping carts or multiple items, consider an e-commerce-specific platform. Always prioritize user security. Use trustworthy payment gateways and ensure transaction-related pages operate over HTTPS. Remember, while this guide centers on PayPal, similar principles can be applied to other payment gateways like Stripe or Square. Always consult the official documentation of your chosen payment platform. ``` You can save the above content into a .md file, for instance, paypal_integration.md , and place it within the docs directory of your MkDocs project. Ensure you also add the new page to the nav section of your mkdocs.yml file to make it accessible from the site's navigation menu.","title":"Payments"},{"location":"payments/#integrating-paypal-payment-in-mkdocs","text":"While MkDocs is primarily designed for creating documentation, it's possible to add static elements like a PayPal \"Buy Now\" button to your pages. Here's how you can integrate such a button:","title":"Integrating PayPal Payment in MkDocs"},{"location":"payments/#1-create-a-paypal-button","text":"Log in to your PayPal account . Navigate to Tools > All Tools > PayPal buttons . Select \"Create new button\". Opt for the \"Buy Now\" button type. Fill out the necessary item details and adjust its appearance as required. Once done, click \"Create Button\".","title":"1. Create a PayPal Button"},{"location":"payments/#2-obtain-the-button-code","text":"After creation, PayPal will provide a button code. You'll find two primary types: - A script-based solution - A URL-only version For MkDocs, the URL-only method is simpler. Copy the URL, which should resemble: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE","title":"2. Obtain the Button Code"},{"location":"payments/#3-embed-into-mkdocs","text":"Incorporate the button into your desired MkDocs content using a Markdown link: [Buy Now with PayPal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE) Alternatively, use an image as a button: [![PayPal](path/to/your/paypal_image.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YOUR_UNIQUE_ID_HERE)","title":"3. Embed into MkDocs"},{"location":"payments/#4-test-the-integration","text":"After integrating, activate your MkDocs site using: mkdocs serve Ensure the payment link redirects to PayPal correctly and showcases the intended item and its price.","title":"4. Test the Integration"},{"location":"payments/#5-deployment","text":"Once tested, deploy your MkDocs site. If you're utilizing a platform like GitHub Pages, ensure your payment button or link functions post-deployment.","title":"5. Deployment"},{"location":"payments/#important-considerations","text":"This approach requires users to leave your MkDocs site to finalize their transaction on PayPal's platform. For a more seamless experience with shopping carts or multiple items, consider an e-commerce-specific platform. Always prioritize user security. Use trustworthy payment gateways and ensure transaction-related pages operate over HTTPS. Remember, while this guide centers on PayPal, similar principles can be applied to other payment gateways like Stripe or Square. Always consult the official documentation of your chosen payment platform. ``` You can save the above content into a .md file, for instance, paypal_integration.md , and place it within the docs directory of your MkDocs project. Ensure you also add the new page to the nav section of your mkdocs.yml file to make it accessible from the site's navigation menu.","title":"Important Considerations"}]}